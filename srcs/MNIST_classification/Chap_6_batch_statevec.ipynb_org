{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "from copy import copy\n",
    "\n",
    "import torch\n",
    "from torch.autograd import Function\n",
    "from torchvision import datasets, transforms\n",
    "import torch.optim as optim\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "import qiskit\n",
    "from qiskit.visualization import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class QMLCircuit:\n",
    "    def __init__(self, n_qubits, backend):\n",
    "        # 学習用量子回路の作成\n",
    "        self._circuit = qiskit.QuantumCircuit(n_qubits, 1)\n",
    "        self.n_params = 3 * (2 * n_qubits + 1)\n",
    "        self.n_qubits = n_qubits\n",
    "        self.all_qubits = [i for i in range(n_qubits)]\n",
    "        self.params = [qiskit.circuit.Parameter('p{}'.format(i)) for i in range(self.n_params)]\n",
    "        \n",
    "        for qubit in self.all_qubits:\n",
    "            self._circuit.u(self.params[3 * qubit],\n",
    "                            self.params[3 * qubit + 1],\n",
    "                            self.params[3 * qubit + 2], qubit)\n",
    "        self._circuit.barrier()\n",
    "        \n",
    "        for qubit in self.all_qubits:\n",
    "            control = qubit\n",
    "            target = (qubit + 1) % n_qubits\n",
    "            self._circuit.cu3(self.params[3 * n_qubits + 3 * qubit],\n",
    "                             self.params[3 * n_qubits + 3 * qubit + 1],\n",
    "                             self.params[3 * n_qubits + 3 * qubit + 2],\n",
    "                             control_qubit = control, target_qubit = target)\n",
    "        self._circuit.u(self.params[-3], self.params[-2], self.params[-1], self.n_qubits - 1)\n",
    "        \n",
    "        # 本例では状態ベクトルより期待値を計算しているため、測定ゲートはコメントアウトしています\n",
    "        #self._circuit.measure(self.n_qubits - 1, 0)\n",
    "\n",
    "        self.backend = backend\n",
    "    \n",
    "    def run(self, data, params):\n",
    "        param_dict = {}\n",
    "        params = tuple(params.detach().numpy())\n",
    "        for i in range(self.n_params):\n",
    "            param_dict[self.params[i]] = params[i]\n",
    "\n",
    "        # データを振幅エンコーディングした量子回路を作成し、学習用量子回路と結合\n",
    "        init_circ = qiskit.QuantumCircuit(self.n_qubits, 1)\n",
    "        init_statevec = self.amplitude_embedding(data)\n",
    "        init_circ.initialize(init_statevec, self.all_qubits)\n",
    "        self._circuit = init_circ + self._circuit\n",
    "        \n",
    "        self.bound_circuit = self._circuit.bind_parameters(param_dict)\n",
    "        # 量子回路を実行\n",
    "        job = qiskit.execute(self.bound_circuit,\n",
    "                             self.backend, )\n",
    "        \n",
    "        # 状態ベクトルを取得し、期待値を計算\n",
    "        outputstate = job.result().get_statevector(self.bound_circuit)\n",
    "        expectation = np.sum((np.abs(outputstate)**2)[2**(self.n_qubits - 1):])\n",
    "        \n",
    "        return np.array([expectation])\n",
    "    \n",
    "    def amplitude_embedding(self, data):\n",
    "        data = np.array(data, dtype = np.float)\n",
    "        dim = 2 ** self.n_qubits\n",
    "        if len(data) < dim:\n",
    "            data = np.pad(data, (0, dim - len(data)), 'constant', constant_values=(0, 0))\n",
    "        if np.sum(data**2) == 0:\n",
    "            data += 1\n",
    "        vec = data / np.sqrt(np.sum(data ** 2))\n",
    "        return vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-8c0f0436828b>:19: DeprecationWarning: The QuantumCircuit.cu3 method is deprecated as of 0.16.0. It will be removed no earlier than 3 months after the release date. You should use the QuantumCircuit.cu method instead, where cu3(ϴ,φ,λ) = cu(ϴ,φ,λ,0).\n",
      "  self._circuit.cu3(self.params[3 * n_qubits + 3 * qubit],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected value 0.49206350764822526\n",
      "0.1360938549041748\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1591.6x2131.08 with 1 Axes>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_qubits = 7\n",
    "n_params = 3 * (2 * n_qubits + 1)\n",
    "params = torch.nn.parameter.Parameter(torch.Tensor(n_params))\n",
    "data = torch.Tensor(np.array([np.random.randint(0, 2) for i in range(2 ** n_qubits)]))\n",
    "simulator = qiskit.Aer.get_backend('statevector_simulator')\n",
    "\n",
    "start = time.time()\n",
    "circuit = QMLCircuit(n_qubits, simulator)\n",
    "print('Expected value {}'.format(circuit.run(data, params)[0]))\n",
    "print(time.time() - start)\n",
    "circuit._circuit.draw('mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class HybridFunction(Function):\n",
    "    \n",
    "    @staticmethod\n",
    "    def forward(ctx, f, data, params):\n",
    "        # 順伝播の計算\n",
    "        def f_each(data, params):\n",
    "            return torch.tensor([f(torch.flatten(d), params) for d in data], dtype=torch.float64)\n",
    "        expectation_z = f_each(data, params)\n",
    "        ctx.save_for_backward(data, params, expectation_z)\n",
    "        ctx.f = f_each\n",
    "        return expectation_z\n",
    "        \n",
    "    @staticmethod\n",
    "    def backward(ctx, grad_output):\n",
    "        # 逆伝播の計算\n",
    "        data, params, res = ctx.saved_tensors\n",
    "        delta = 0.001\n",
    "        gradients = []\n",
    "        for i in range(len(params)):\n",
    "            params[i] += delta\n",
    "            gradient  = torch.sum((ctx.f(data, params) - res) / delta * grad_output)\n",
    "            params[i] -= delta\n",
    "            gradients.append(gradient)\n",
    "        return None, None, torch.Tensor(gradients), None\n",
    "\n",
    "class Hybrid(nn.Module):\n",
    "    # 量子回路レイヤーの定義\n",
    "    def __init__(self, n_qubits, backend, shots):\n",
    "        super(Hybrid, self).__init__()\n",
    "        self.quantum_circuit = QMLCircuit(n_qubits, backend)\n",
    "        \n",
    "    def forward(self, data, params):\n",
    "        def f(data, params):\n",
    "            circ = copy(self.quantum_circuit)\n",
    "            res = circ.run(data, params)\n",
    "            return res\n",
    "        return HybridFunction.apply(f, data, params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 学習用サンプルデータ\n",
    "# MNISTから\"0\"と\"1\"を100サンプルずつ抜き出す\n",
    "n_samples = 100\n",
    "\n",
    "X_train = datasets.MNIST(root='./data', train=True, download=True,\n",
    "                         transform=transforms.Compose([transforms.ToTensor()]))\n",
    "\n",
    "idx = np.append(np.where(X_train.targets == 0)[0][:n_samples], \n",
    "                np.where(X_train.targets == 1)[0][:n_samples])\n",
    "\n",
    "X_train.data = X_train.data[idx]\n",
    "X_train.targets = X_train.targets[idx]\n",
    "\n",
    "train_loader = torch.utils.data.DataLoader(X_train, batch_size=16, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16, 1, 9, 9])\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x216 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_samples_show = 6\n",
    "\n",
    "data_iter = iter(train_loader)\n",
    "fig, axes = plt.subplots(nrows=1, ncols=n_samples_show, figsize=(10, 3))\n",
    "\n",
    "while n_samples_show > 0:\n",
    "    images, targets = data_iter.__next__()\n",
    "    images = (torch.nn.AvgPool2d(3)(images))\n",
    "    axes[n_samples_show - 1].imshow(images[0][0].numpy(), cmap='gray')\n",
    "    axes[n_samples_show - 1].set_xticks([])\n",
    "    axes[n_samples_show - 1].set_yticks([])\n",
    "    axes[n_samples_show - 1].set_title(\"Labeled: {}\".format(targets[0].item()))\n",
    "    \n",
    "    n_samples_show -= 1\n",
    "print(images.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_samples = 50\n",
    "\n",
    "X_test = datasets.MNIST(root='./data', train=False, download=True,\n",
    "                        transform=transforms.Compose([transforms.ToTensor()]))\n",
    "\n",
    "idx = np.append(np.where(X_test.targets == 0)[0][:n_samples], \n",
    "                np.where(X_test.targets == 1)[0][:n_samples])\n",
    "\n",
    "X_test.data = X_test.data[idx]\n",
    "X_test.targets = X_test.targets[idx].float()\n",
    "\n",
    "test_loader = torch.utils.data.DataLoader(X_test, batch_size=16, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):\n",
    "    def __init__(self, n_qubits, n_params):\n",
    "        super(Net, self).__init__()\n",
    "        self.hybrid = Hybrid(n_qubits, qiskit.Aer.get_backend('statevector_simulator'), 1)\n",
    "        self.weight = torch.nn.parameter.Parameter(torch.Tensor(n_params))\n",
    "        torch.nn.init.uniform_(self.weight, 0.0, 2 * np.pi)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.hybrid(x, self.weight)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-2-8c0f0436828b>:19: DeprecationWarning: The QuantumCircuit.cu3 method is deprecated as of 0.16.0. It will be removed no earlier than 3 months after the release date. You should use the QuantumCircuit.cu method instead, where cu3(ϴ,φ,λ) = cu(ϴ,φ,λ,0).\n",
      "  self._circuit.cu3(self.params[3 * n_qubits + 3 * qubit],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training [2.5%]\tLoss: 0.2586\n",
      "Training [5.0%]\tLoss: 0.2176\n",
      "Training [7.5%]\tLoss: 0.1958\n",
      "Training [10.0%]\tLoss: 0.1784\n",
      "Training [12.5%]\tLoss: 0.1675\n",
      "Training [15.0%]\tLoss: 0.1587\n",
      "Training [17.5%]\tLoss: 0.1503\n",
      "Training [20.0%]\tLoss: 0.1432\n",
      "Training [22.5%]\tLoss: 0.1364\n",
      "Training [25.0%]\tLoss: 0.1320\n",
      "Training [27.5%]\tLoss: 0.1282\n",
      "Training [30.0%]\tLoss: 0.1258\n",
      "Training [32.5%]\tLoss: 0.1218\n",
      "Training [35.0%]\tLoss: 0.1184\n",
      "Training [37.5%]\tLoss: 0.1164\n",
      "Training [40.0%]\tLoss: 0.1127\n",
      "Training [42.5%]\tLoss: 0.1107\n",
      "Training [45.0%]\tLoss: 0.1102\n",
      "Training [47.5%]\tLoss: 0.1090\n",
      "Training [50.0%]\tLoss: 0.1071\n",
      "Training [52.5%]\tLoss: 0.1074\n",
      "Training [55.0%]\tLoss: 0.1060\n",
      "Training [57.5%]\tLoss: 0.1044\n",
      "Training [60.0%]\tLoss: 0.1026\n",
      "Training [62.5%]\tLoss: 0.1027\n",
      "Training [65.0%]\tLoss: 0.1018\n",
      "Training [67.5%]\tLoss: 0.0985\n",
      "Training [70.0%]\tLoss: 0.0974\n",
      "Training [72.5%]\tLoss: 0.0981\n",
      "Training [75.0%]\tLoss: 0.0965\n",
      "Training [77.5%]\tLoss: 0.0951\n",
      "Training [80.0%]\tLoss: 0.0960\n",
      "Training [82.5%]\tLoss: 0.0948\n",
      "Training [85.0%]\tLoss: 0.0938\n",
      "Training [87.5%]\tLoss: 0.0943\n",
      "Training [90.0%]\tLoss: 0.0943\n",
      "Training [92.5%]\tLoss: 0.0938\n",
      "Training [95.0%]\tLoss: 0.0940\n",
      "Training [97.5%]\tLoss: 0.0950\n",
      "Training [100.0%]\tLoss: 0.0942\n"
     ]
    }
   ],
   "source": [
    "n_qubits = 7\n",
    "n_params = 3 * (2 * n_qubits + 1)\n",
    "model = Net(n_qubits, n_params)\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.02)\n",
    "loss_func = nn.MSELoss()\n",
    "\n",
    "epochs = 40\n",
    "loss_list = []\n",
    "\n",
    "model.train()\n",
    "for epoch in range(epochs):\n",
    "    total_loss = []\n",
    "    for batch_idx, (data, target) in enumerate(train_loader):\n",
    "        data = (torch.nn.AvgPool2d(3)(data)).float()\n",
    "        optimizer.zero_grad()\n",
    "        # モデルの出力\n",
    "        output = model(data)\n",
    "        # 損失関数の計算\n",
    "        loss = loss_func(output.squeeze(), target.double())\n",
    "        # 誤差逆伝播\n",
    "        loss.backward()\n",
    "        # パラメータ更新\n",
    "        optimizer.step()\n",
    "        total_loss.append(loss.item())\n",
    "    loss_list.append(sum(total_loss)/len(total_loss))\n",
    "    print('Training [{:.1f}%]\\tLoss: {:.4f}'.format(\n",
    "        100. * (epoch + 1) / epochs, loss_list[-1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE Loss')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(loss_list)\n",
    "plt.title('Training Loss History')\n",
    "plt.xlabel('Training Iterations')\n",
    "plt.ylabel('MSE Loss')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performance on test data:\n",
      "\tLoss: 0.0803\n",
      "\tAccuracy: 100.0%\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    \n",
    "    correct = 0\n",
    "    n_sample = 0\n",
    "    output_list = []\n",
    "    target_list = []\n",
    "    for batch_idx, (data, target) in enumerate(test_loader):\n",
    "        data = (torch.nn.AvgPool2d(3)(data)).float()\n",
    "        output = model(data)\n",
    "        \n",
    "        pred = (output > 0.5).squeeze().int()\n",
    "        correct += torch.sum(pred == target).item()\n",
    "        n_sample += len(target)\n",
    "        \n",
    "        output_list.append(output.squeeze())\n",
    "        target_list.append(target.double())\n",
    "\n",
    "    total_output = torch.cat(output_list)\n",
    "    total_target = torch.cat(target_list)\n",
    "    total_loss = loss_func(total_output, total_target)\n",
    "    print('Performance on test data:\\n\\tLoss: {:.4f}\\n\\tAccuracy: {:.1f}%'.format(\n",
    "        total_loss.item(),\n",
    "        correct / n_sample * 100)\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performance on train data:\n",
      "\tLoss: 0.0938\n",
      "\tAccuracy: 98.0%\n"
     ]
    }
   ],
   "source": [
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    \n",
    "    correct = 0\n",
    "    n_sample = 0\n",
    "    output_list = []\n",
    "    target_list = []\n",
    "    for batch_idx, (data, target) in enumerate(train_loader):\n",
    "        data = (torch.nn.AvgPool2d(3)(data)).float()\n",
    "        output = model(data)\n",
    "        \n",
    "        pred = (output > 0.5).squeeze().int()\n",
    "        correct += torch.sum(pred == target).item()\n",
    "        n_sample += len(target)\n",
    "        \n",
    "        output_list.append(output.squeeze())\n",
    "        target_list.append(target.double())\n",
    "\n",
    "    total_output = torch.cat(output_list)\n",
    "    total_target = torch.cat(target_list)\n",
    "    total_loss = loss_func(total_output, total_target)\n",
    "    print('Performance on train data:\\n\\tLoss: {:.4f}\\n\\tAccuracy: {:.1f}%'.format(\n",
    "        total_loss.item(),\n",
    "        correct / n_sample * 100)\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
